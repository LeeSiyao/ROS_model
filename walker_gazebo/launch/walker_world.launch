<?xml version="1.0" encoding="utf-8"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find walker_gazebo)/worlds/walker.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Publish a static transform between the world and the base of the robot -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_world" args="0 0 0 0 0 0 1 world base" />

  <!-- Load the URDF into the ROS Parameter Server -->
  <!-- <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
             args="-file $(find urdf)/urdf/walker.urdf -urdf -model walker -param urdf" />-->
  <param name="robot_description"
      command="$(find xacro)/xacro --inorder '$(find walker_description)/urdf/walker/walker.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- <param name="robot_description" command="cat '$(find urdf)urdf/walker.urdf'" />-->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model walker -param robot_description"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <!-- <rosparam file="$(find walker_gazebo)/config/gazebo_ros_control.yaml" command="load"/>  -->
  <rosparam file="$(find walker_gazebo)/config/walker_controller.yaml" command="load"/> 

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      output="screen" ns="/walker" args="joint_state_controller
      head_j1_position_controller
      head_j2_position_controller
      right_limb_j1_position_controller
      right_limb_j2_position_controller
      right_limb_j3_position_controller
      right_limb_j4_position_controller
      right_limb_j5_position_controller
      right_limb_j6_position_controller
      right_limb_j7_position_controller
      right_thumb_j1_position_controller
      right_index_j1_position_controller
      right_middle_j1_position_controller
      right_ring_j1_position_controller
      left_limb_j1_position_controller
      left_limb_j2_position_controller
      left_limb_j3_position_controller
      left_limb_j4_position_controller
      left_limb_j5_position_controller
      left_limb_j6_position_controller
      left_limb_j7_position_controller
      left_thumb_j1_position_controller
      left_index_j1_position_controller
      left_middle_j1_position_controller
      left_ring_j1_position_controller
      right_leg_j1_position_controller
      right_leg_j2_position_controller
      right_leg_j3_position_controller
      right_leg_j4_position_controller
      right_leg_j5_position_controller
      right_leg_j6_position_controller
      left_leg_j1_position_controller
      left_leg_j2_position_controller
      left_leg_j3_position_controller
      left_leg_j4_position_controller
      left_leg_j5_position_controller
      left_leg_j6_position_controller
      "/> 

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/walker/joint_states" />
  </node>

  <node name="test_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen">
    <param name="/use_gui" value="false"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

</launch>

